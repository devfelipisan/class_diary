// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
}

model apprendiceship { // tabela de junção para a BNCC
  id            String      @id
  competence    competences @relation(fields: [competence_id], references: [id])
  competence_id String
  group_year    group_years @relation(fields: [group_year_id], references: [id])
  group_year_id String
  unit          units       @relation(fields: [unit_id], references: [id])
  unit_id       String
  object        objects     @relation(fields: [object_id], references: [id])
  object_id     String
  skill         skills      @relation(fields: [skill_id], references: [id])
  skill_id      String
  comment       comments    @relation(fields: [comment_id], references: [id])
  comment_id    String
  resume        resumes?    @relation(fields: [resume_id], references: [id])
  resume_id     String?
  field         fields?     @relation(fields: [field_id], references: [id])
  field_id      String?
  axis          axes?       @relation(fields: [axis_id], references: [id])
  axis_id       String?
  created       DateTime
}

model competences { // tabela para registro de matéria como "Português, Matemática, História, ..."
  id             String           @id
  name           String
  created        DateTime
  apprendiceship apprendiceship[]
  presences      presences[]
  coefficients   coefficients[]
}

//rever id autoincremet, pois do 3 pula para o 13
model units { // tabela para o registro da habilidade sobre um respectivo item na BNCC
  id             String           @id
  description    String
  created        DateTime
  apprendiceship apprendiceship[]
}

model skills { // tabela para o registro da habilidade sobre um respectivo item na BNCC
  id             String           @id
  description    String
  created        DateTime
  apprendiceship apprendiceship[]
}

model resumes { // tabela para o registro da descrição sobre um respectivo item na BNCC
  id             String           @id @default(uuid())
  description    String
  created        DateTime
  apprendiceship apprendiceship[]
}

model axes { // tabela para o registro de eixo sobre o item respectivo na BNCC
  id             String           @id
  description    String
  created        DateTime
  apprendiceship apprendiceship[]
}

model fields { // tabela para o registro do campo de atuação sobre o item respectivo na BNCC
  id             String           @id
  description    String
  created        DateTime?
  apprendiceship apprendiceship[]
}

model comments { // tabela para o registro de comentário sobre aquele item da BNCC
  id             String           @id @default(uuid())
  comment        String
  created        DateTime
  apprendiceship apprendiceship[]
}

model objects { //tabela para o registro de objetos sobre aquele item da BNCC
  id             String           @id @default(uuid())
  description    String
  created        DateTime?
  apprendiceship apprendiceship[]
}

model group_years { //tabela para o registro para o agrupamento série sobre aquele item da BNCC
  id             String           @id
  description    String
  created        DateTime
  apprendiceship apprendiceship[]
}

model presences { //Tabela de registro de presença do aluno
  id            String      @id @default(uuid())
  student       students    @relation(fields: [student_id], references: [id])
  student_id    String
  competence    competences @relation(fields: [competence_id], references: [id])
  competence_id String
  presence      Boolean
  created       DateTime
}

model coefficients { // tabela para o registro de nota do aluno
  id            String      @id @default(uuid())
  student       students    @relation(fields: [student_id], references: [id])
  student_id    String
  teacher       teachers    @relation(fields: [teacher_id], references: [id])
  teacher_id    String
  competence    competences @relation(fields: [competence_id], references: [id])
  competence_id String
  grade         Int
  created       DateTime
}

model graduating_class { // tabela para o registro de classe criada
  id          String          @id @default(uuid())
  school_year       Int
  school_series       String
  student_id students[] //Uma turma possui um ou mais alunos
  teacher_id String
  teacher teachers? @relation(fields: [teacher_id], references: [id]) // uma turma pode está vinculado a um professor
}
// Verificar a lógica quem deve ser criado primeiro e puxar os demais?????
model students { //tabela para o registro e matrícula do aluno
  id           String         @id @default(uuid())
  name         String
  birthday     DateTime
  created      DateTime
  graduating_class_id    String?
  graduating_class  graduating_class? @relation(fields: [graduating_class_id], references: [id]) //um aluno está matriculado em uma única turma
  presences    presences[]
  coefficients coefficients[] //um aluno possui várias notas
  @@unique([id])
}

model teachers { //tabela para o registro do professor
  id           String         @id @default(uuid())
  name         String
  email         String
  created      DateTime
  coefficients coefficients[]
  graduating_class graduating_class[] // um professor pode estar associado a uma ou mais turmas
  @@unique([id])
}